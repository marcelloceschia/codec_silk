/*
 * Copyright (C) 2012 Todd Mortimer
 *
 * Distributed under the terms of the GNU General Public License
 *
 */

/* Samples generated from the encoder program
 * included with the silk source */

static uint8_t ex_silk8[] = {
  0x29, 0xE4, 0xFD, 0x3E, 0x2D, 0xC8, 0x3C,
  0xEE, 0x23, 0xB9, 0x95, 0xF4, 0x35, 0x8A,
  0x18, 0xF2, 0xF2, 0x6D, 0x75, 0xBB, 0xA8,
  0x75, 0x27, 0x29, 0x35, 0x84, 0x95, 0x59,
  0xF7, 0x39, 0x43, 0x68, 0xE5, 0xA3, 0xA8,
  0x4A, 0xB8, 0xE3, 0xFD, 0xA6, 0x73, 0x3A,
  0xEA, 0x88, 0x82, 0x44, 0xC2, 0x64, 0x20,
  0xA7, 0x18, 0xCD, 0xA1
};

static uint8_t ex_silk12[] = {
  0x68, 0x64, 0xAC, 0x65, 0x84, 0x56, 0xC2,
  0xB0, 0xCB, 0x90, 0x83, 0x92, 0x39, 0x2F,
  0xD, 0xEA, 0x7A, 0xE9, 0xE, 0xAD, 0x25,
  0xE1, 0x9, 0xEF, 0xEF, 0x39, 0xA2, 0xC8,
  0x64, 0x54, 0x5D, 0xDF, 0xC6, 0xC0, 0x81,
  0x3, 0x89, 0xA4, 0x91, 0xEE, 0x7B, 0x9D,
  0xAF, 0xFC, 0x26, 0xB1, 0x66, 0xB1, 0xE9,
  0x13, 0x95, 0xD2, 0x57, 0xC7, 0x83, 0x36,
  0xCF, 0x3C, 0x5F, 0x9C, 0x15, 0x70, 0xBA,
  0xF4, 0xC1, 0x9, 0x22, 0x80, 0xEB, 0xCF,
  0x36, 0x2, 0x5F, 0x6D, 0x4A, 0x20, 0x25,
  0x47, 0x17, 0x19, 0x3E, 0x41, 0x53, 0x76,
  0xD9, 0x36, 0x8D, 0xA6, 0xEA, 0x6, 0x30, 0x7F
};

static uint8_t ex_silk16[] = {
  0x68, 0x4F, 0x4B, 0xA6, 0xAB, 0x58, 0x8D,
  0xE, 0x47, 0x7B, 0x16, 0x7D, 0x7B, 0x7B,
  0x76, 0x13, 0x76, 0x1E, 0xF6, 0x79, 0x7E,
  0xF0, 0x12, 0xEB, 0x6A, 0x96, 0xF3, 0xA7,
  0xE8, 0x2F, 0xFB, 0x40, 0x1D, 0x95, 0xFE,
  0x98, 0x80, 0xD5, 0x4A, 0xE2, 0xAF, 0xF,
  0x50, 0xD2, 0x29, 0xB0, 0x68, 0xA2, 0x32,
  0xD2, 0x6B, 0xDD, 0xF2, 0x8D, 0x55, 0x15,
  0x60, 0xD8, 0xB3, 0x28, 0x7C, 0xAA, 0x49,
  0xBB, 0xE1, 0xA7, 0xA, 0xD4, 0xDD, 0xC9,
  0x7, 0x4E, 0x6D, 0x58, 0x8, 0x5B, 0x8C,
  0x70, 0xCB, 0xC2, 0x35, 0xB5, 0xAC, 0x2F,
  0x42, 0xAF, 0x18, 0xBD, 0xDA, 0x6A, 0xE4,
  0xA6, 0x40, 0x71, 0x0, 0xBA, 0xE2, 0x75,
  0xE7, 0x32, 0x6D, 0x2A, 0xD1, 0x10, 0xBF,
  0xF7, 0x1F
};

static uint8_t ex_silk24[] = {
  0xA6, 0xC3, 0x9C, 0xEA, 0x13, 0xC5, 0xB2,
  0x8E, 0xE9, 0xA8, 0xD0, 0x7E, 0x22, 0x9C,
  0xC1, 0x3E, 0x94, 0x6F, 0x42, 0x88, 0x92,
  0xC, 0xFE, 0x2F, 0x27, 0xA2, 0xED, 0xA2,
  0x1C, 0x87, 0x4D, 0x75, 0x15, 0xDC, 0xA8,
  0xF1, 0x8A, 0xBE, 0x71, 0xDB, 0x5, 0xCE,
  0x60, 0xC9, 0x22, 0x5E, 0xE6, 0x34, 0xB7,
  0xAE, 0x5A, 0xF6, 0xF7, 0x25, 0xB4, 0x45,
  0xE3, 0x67, 0x8E, 0x7E, 0x1B, 0xB7, 0xD6,
  0x1A, 0x1E, 0xB3, 0x4A, 0x13, 0x2E, 0xAD,
  0x31, 0x41, 0xA, 0x11, 0x1C, 0x91, 0xAE,
  0x22, 0xD6, 0x58, 0xDB, 0x8A, 0x37, 0x14,
  0x77, 0x3B, 0x3D, 0x71, 0xF8, 0x7D, 0x46,
  0xFE, 0xB5, 0x34, 0x62, 0x1A, 0x7E, 0xE,
  0x8A, 0x69, 0x82, 0x56, 0x97, 0x77, 0xFF,
  0x82, 0x2D, 0x2E, 0x1F, 0xBB, 0x9A, 0x53,
  0x4F, 0x7, 0x7F, 0xB2, 0x9A, 0x99, 0xFF
};

static struct ast_frame *silk8_sample(void)
{
  static struct ast_frame f = {
    .frametype = AST_FRAME_VOICE,
    .datalen = sizeof(ex_silk8),
    .samples = 60 * 8000 / 1000,
    .mallocd = 0,
    .offset = 0,
    .src = __PRETTY_FUNCTION__,
    .data.ptr = ex_silk8
  };
  ast_format_set(&f.subclass.format, AST_FORMAT_SILK, 1,
                 SILK_ATTR_KEY_SAMP_RATE,
                 SILK_ATTR_VAL_SAMP_8KHZ,
                 AST_FORMAT_ATTR_END);
  return &f;

}

static struct ast_frame *silk12_sample(void)
{
  static struct ast_frame f = {
    .frametype = AST_FRAME_VOICE,
    .datalen = sizeof(ex_silk12),
    .samples = 60 * 12000 / 1000,
    .mallocd = 0,
    .offset = 0,
    .src = __PRETTY_FUNCTION__,
    .data.ptr = ex_silk12
  };
  ast_format_set(&f.subclass.format, AST_FORMAT_SILK, 1,
                 SILK_ATTR_KEY_SAMP_RATE,
                 SILK_ATTR_VAL_SAMP_12KHZ,
                 AST_FORMAT_ATTR_END);
  return &f;

}

static struct ast_frame *silk16_sample(void)
{
  static struct ast_frame f = {
    .frametype = AST_FRAME_VOICE,
    .datalen = sizeof(ex_silk16),
    .samples = 60 * 16000 / 1000,
    .mallocd = 0,
    .offset = 0,
    .src = __PRETTY_FUNCTION__,
    .data.ptr = ex_silk16
  };
  ast_format_set(&f.subclass.format, AST_FORMAT_SILK, 1,
                 SILK_ATTR_KEY_SAMP_RATE,
                 SILK_ATTR_VAL_SAMP_16KHZ,
                 AST_FORMAT_ATTR_END);
  return &f;

}

static struct ast_frame *silk24_sample(void)
{
  static struct ast_frame f = {
    .frametype = AST_FRAME_VOICE,
    .datalen = sizeof(ex_silk24),
    .samples = 60 * 24000 / 1000,
    .mallocd = 0,
    .offset = 0,
    .src = __PRETTY_FUNCTION__,
    .data.ptr = ex_silk24
  };
  ast_format_set(&f.subclass.format, AST_FORMAT_SILK, 1,
                 SILK_ATTR_KEY_SAMP_RATE,
                 SILK_ATTR_VAL_SAMP_24KHZ,
                 AST_FORMAT_ATTR_END);
  return &f;

}
 
